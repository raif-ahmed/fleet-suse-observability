apiVersion: v1
kind: Namespace
metadata:
  annotations:
    lifecycle.cattle.io/create.namespace-auth: 'true'
  finalizers:
    - controller.cattle.io/namespace-auth
  labels:
    kubernetes.io/metadata.name: suse-observability
  name: suse-observability
spec:
  finalizers:
    - kubernetes
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: suse-observability
  namespace: suse-observability
spec:
  repo: https://charts.rancher.com/server-charts/prime/suse-observability
  chart: suse-observability
  version: 2.2.0
  targetNamespace: suse-observability
  createNamespace: true
  set:
    global.receiverApiKey: ""
    stackstate.baseUrl: "http://localhost"
    stackstate.admin.authentication.password: ""
    stackstate.authentication.adminPassword: ""
    stackstate.license.key: ""
  valuesContent: |-
    ingress:
      # ingress.annotations -- Annotations for ingress objects.
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # ingress.enabled -- Enable use of ingress controllers.
      enabled: false
      path: /
      # ingress.hosts -- List of ingress hostnames; the paths are fixed to StackState backend services
      hosts: []
      # - host: stackstate.local
      # ingress.tls -- List of ingress TLS certificates to use.
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - stackstate.local
    # currently there is no way to set the service as NodePort on specific service base, 
    # even if we set this in common then this break some services that not configured correctly 
    common:
      service:
        type: NodePort
        # externalTrafficPolicy: Cluster
    clickhouse:
      replicaCount: 1
      persistence:
        size: 50Gi

    elasticsearch:
      prometheus-elasticsearch-exporter:
        image:
          registry: "registry.rancher.com"
          repository: "suse-observability/elasticsearch-exporter"
        resources:
          limits:
            cpu: "50m"
            memory: "50Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      minimumMasterNodes: 1
      replicas: 1
      # Only overriding memory settings
      esJavaOpts: "-Xmx1500m -Xms1500m -Des.allow_insecure_settings=true -Xlog:disable -Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=8,filesize=16m"
      resources:
        requests:
          cpu: 500m
          memory: 2500Mi
        limits:
          cpu: 1000m
          memory: 2500Mi
      volumeClaimTemplate:
        resources:
          requests:
            storage: 50Gi
    hbase:
      version: "2.5"
      deployment:
        mode: "Mono"
      stackgraph:
        persistence:
          size: 50Gi
        resources:
          requests:
            memory: "2250Mi"
            cpu: "500m"
          limits:
            cpu: "1500m"
            memory: "2250Mi"
      tephra:
        resources:
          limits:
            cpu: "100m"
            memory: "512Mi"
          requests:
            memory: "512Mi"
            cpu: "50m"
        replicaCount: 1
    kafka:
      defaultReplicationFactor: 1
      offsetsTopicReplicationFactor: 1
      replicaCount: 1
      transactionStateLogReplicationFactor: 1
      resources:
        requests:
          cpu: "800m"
          memory: "2048Mi"
        limits:
          memory: "2048Mi"
          cpu: "1600m"
      persistence:
        size: 60Gi
    stackstate:
      experimental:
        server:
          split: false
      components:
        all:
          extraEnv:
            open:
              CONFIG_FORCE_stackstate_topologyQueryService_maxStackElementsPerQuery: "1000"
              CONFIG_FORCE_stackstate_topologyQueryService_maxLoadedElementsPerQuery: "1000"
              CONFIG_FORCE_stackstate_agents_agentLimit: "10"
        server:
          extraEnv:
            open:
              CONFIG_FORCE_stackstate_sync_initializationBatchParallelism: "1"
              CONFIG_FORCE_stackstate_healthSync_initialLoadParallelism: "1"
              CONFIG_FORCE_stackstate_stateService_initializationParallelism: "1"
              CONFIG_FORCE_stackstate_stateService_initialLoadTransactionSize: "2500"
          resources:
            limits:
              ephemeral-storage: 5Gi
              cpu: 3000m
              memory: 5Gi
            requests:
              cpu: 1500m
              memory: 5Gi
        e2es:
          resources:
            requests:
              memory: "512Mi"
              cpu: "50m"
            limits:
              memory: "512Mi"
        correlate:
          resources:
            requests:
              memory: "1250Mi"
              cpu: "500m"
            limits:
              cpu: "1000m"
              memory: "1250Mi"
        receiver:
          split:
            enabled: false
          extraEnv:
            open:
              CONFIG_FORCE_akka_http_host__connection__pool_max__open__requests: "256"
          resources:
            requests:
              memory: "1000Mi"
              cpu: "1000m"
            limits:
              memory: "1000Mi"
              cpu: "2000m"
        vmagent:
          resources:
            limits:
              memory: "640Mi"
            requests:
              memory: "384Mi"
        ui:
          replicaCount: 1

    victoria-metrics-0:
      server:
        resources:
          requests:
            cpu: "500m"
            memory: 1500Mi
          limits:
            cpu: "1000m"
            memory: 1750Mi
        persistentVolume:
          size: 50Gi
      backup:
        vmbackup:
          resources:
            requests:
              memory: 50Mi
            limits:
              memory: 50Mi
    victoria-metrics-1:
      enabled: false
      server:
        persistentVolume:
          size: 50Gi

    zookeeper:
      replicaCount: 1
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: suse-observability
    meta.helm.sh/release-namespace: suse-observability
  creationTimestamp: '2024-12-11T14:31:01Z'
  labels:
    app.kubernetes.io/component: router
    app.kubernetes.io/instance: suse-observability
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: suse-observability
    app.kubernetes.io/version: 7.0.0-snapshot.20241204151219-master-db9515b
    helm.sh/chart: suse-observability-2.2.0
  name: suse-observability-router-nodeport
  namespace: suse-observability
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: router
      port: 8080
      protocol: TCP
      targetPort: router
    - name: admin
      port: 8001
      protocol: TCP
      targetPort: admin
  selector:
    app.kubernetes.io/component: router
    app.kubernetes.io/instance: suse-observability
    app.kubernetes.io/name: suse-observability
  sessionAffinity: None
  type: NodePort